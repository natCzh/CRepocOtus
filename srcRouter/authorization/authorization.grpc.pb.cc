// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authorization.proto

#include "authorization.pb.h"
#include "authorization.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace authorization {

static const char* Authorization_method_names[] = {
  "/authorization.Authorization/CheckAuthorizationObj",
  "/authorization.Authorization/AuthorizationObj",
};

std::unique_ptr< Authorization::Stub> Authorization::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authorization::Stub> stub(new Authorization::Stub(channel, options));
  return stub;
}

Authorization::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckAuthorizationObj_(Authorization_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthorizationObj_(Authorization_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Authorization::Stub::CheckAuthorizationObj(::grpc::ClientContext* context, const ::authorization::CheckAuthRequest& request, ::authorization::CheckAuthReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authorization::CheckAuthRequest, ::authorization::CheckAuthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckAuthorizationObj_, context, request, response);
}

void Authorization::Stub::async::CheckAuthorizationObj(::grpc::ClientContext* context, const ::authorization::CheckAuthRequest* request, ::authorization::CheckAuthReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authorization::CheckAuthRequest, ::authorization::CheckAuthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAuthorizationObj_, context, request, response, std::move(f));
}

void Authorization::Stub::async::CheckAuthorizationObj(::grpc::ClientContext* context, const ::authorization::CheckAuthRequest* request, ::authorization::CheckAuthReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAuthorizationObj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authorization::CheckAuthReply>* Authorization::Stub::PrepareAsyncCheckAuthorizationObjRaw(::grpc::ClientContext* context, const ::authorization::CheckAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authorization::CheckAuthReply, ::authorization::CheckAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckAuthorizationObj_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authorization::CheckAuthReply>* Authorization::Stub::AsyncCheckAuthorizationObjRaw(::grpc::ClientContext* context, const ::authorization::CheckAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckAuthorizationObjRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Authorization::Stub::AuthorizationObj(::grpc::ClientContext* context, const ::authorization::AuthObjRequest& request, ::authorization::AuthObjReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::authorization::AuthObjRequest, ::authorization::AuthObjReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthorizationObj_, context, request, response);
}

void Authorization::Stub::async::AuthorizationObj(::grpc::ClientContext* context, const ::authorization::AuthObjRequest* request, ::authorization::AuthObjReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::authorization::AuthObjRequest, ::authorization::AuthObjReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthorizationObj_, context, request, response, std::move(f));
}

void Authorization::Stub::async::AuthorizationObj(::grpc::ClientContext* context, const ::authorization::AuthObjRequest* request, ::authorization::AuthObjReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthorizationObj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::authorization::AuthObjReply>* Authorization::Stub::PrepareAsyncAuthorizationObjRaw(::grpc::ClientContext* context, const ::authorization::AuthObjRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::authorization::AuthObjReply, ::authorization::AuthObjRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthorizationObj_, context, request);
}

::grpc::ClientAsyncResponseReader< ::authorization::AuthObjReply>* Authorization::Stub::AsyncAuthorizationObjRaw(::grpc::ClientContext* context, const ::authorization::AuthObjRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthorizationObjRaw(context, request, cq);
  result->StartCall();
  return result;
}

Authorization::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::authorization::CheckAuthRequest, ::authorization::CheckAuthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authorization::CheckAuthRequest* req,
             ::authorization::CheckAuthReply* resp) {
               return service->CheckAuthorizationObj(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authorization_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authorization::Service, ::authorization::AuthObjRequest, ::authorization::AuthObjReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Authorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::authorization::AuthObjRequest* req,
             ::authorization::AuthObjReply* resp) {
               return service->AuthorizationObj(ctx, req, resp);
             }, this)));
}

Authorization::Service::~Service() {
}

::grpc::Status Authorization::Service::CheckAuthorizationObj(::grpc::ServerContext* context, const ::authorization::CheckAuthRequest* request, ::authorization::CheckAuthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Authorization::Service::AuthorizationObj(::grpc::ServerContext* context, const ::authorization::AuthObjRequest* request, ::authorization::AuthObjReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace authorization

