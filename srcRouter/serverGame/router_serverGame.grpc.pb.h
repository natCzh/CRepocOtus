// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: router_serverGame.proto
#ifndef GRPC_router_5fserverGame_2eproto__INCLUDED
#define GRPC_router_5fserverGame_2eproto__INCLUDED

#include "router_serverGame.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace router_serverGame {

// The greeting service definition.
class ServerGame final {
 public:
  static constexpr char const* service_full_name() {
    return "router_serverGame.ServerGame";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::router_serverGame::StartNewGameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>> AsyncStartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>>(AsyncStartNewGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>> PrepareAsyncStartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>>(PrepareAsyncStartNewGameRaw(context, request, cq));
    }
    virtual ::grpc::Status AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::router_serverGame::AddCommandGameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>> AsyncAddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>>(AsyncAddCommandGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>> PrepareAsyncAddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>>(PrepareAsyncAddCommandGameRaw(context, request, cq));
    }
    virtual ::grpc::Status StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::router_serverGame::StopGameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>> AsyncStopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>>(AsyncStopGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>> PrepareAsyncStopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>>(PrepareAsyncStopGameRaw(context, request, cq));
    }
    virtual ::grpc::Status LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::router_serverGame::LogGameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>> AsyncLogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>>(AsyncLogGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>> PrepareAsyncLogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>>(PrepareAsyncLogGameRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>* AsyncStartNewGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StartNewGameReply>* PrepareAsyncStartNewGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>* AsyncAddCommandGameRaw(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::AddCommandGameReply>* PrepareAsyncAddCommandGameRaw(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>* AsyncStopGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::StopGameReply>* PrepareAsyncStopGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>* AsyncLogGameRaw(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::router_serverGame::LogGameReply>* PrepareAsyncLogGameRaw(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::router_serverGame::StartNewGameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>> AsyncStartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>>(AsyncStartNewGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>> PrepareAsyncStartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>>(PrepareAsyncStartNewGameRaw(context, request, cq));
    }
    ::grpc::Status AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::router_serverGame::AddCommandGameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>> AsyncAddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>>(AsyncAddCommandGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>> PrepareAsyncAddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>>(PrepareAsyncAddCommandGameRaw(context, request, cq));
    }
    ::grpc::Status StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::router_serverGame::StopGameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>> AsyncStopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>>(AsyncStopGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>> PrepareAsyncStopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>>(PrepareAsyncStopGameRaw(context, request, cq));
    }
    ::grpc::Status LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::router_serverGame::LogGameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>> AsyncLogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>>(AsyncLogGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>> PrepareAsyncLogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>>(PrepareAsyncLogGameRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response, std::function<void(::grpc::Status)>) override;
      void StartNewGame(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response, std::function<void(::grpc::Status)>) override;
      void AddCommandGame(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response, std::function<void(::grpc::Status)>) override;
      void StopGame(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response, std::function<void(::grpc::Status)>) override;
      void LogGame(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>* AsyncStartNewGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::StartNewGameReply>* PrepareAsyncStartNewGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StartNewGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>* AsyncAddCommandGameRaw(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::AddCommandGameReply>* PrepareAsyncAddCommandGameRaw(::grpc::ClientContext* context, const ::router_serverGame::AddCommandGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>* AsyncStopGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::StopGameReply>* PrepareAsyncStopGameRaw(::grpc::ClientContext* context, const ::router_serverGame::StopGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>* AsyncLogGameRaw(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::router_serverGame::LogGameReply>* PrepareAsyncLogGameRaw(::grpc::ClientContext* context, const ::router_serverGame::LogGameRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartNewGame_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCommandGame_;
    const ::grpc::internal::RpcMethod rpcmethod_StopGame_;
    const ::grpc::internal::RpcMethod rpcmethod_LogGame_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartNewGame(::grpc::ServerContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response);
    virtual ::grpc::Status AddCommandGame(::grpc::ServerContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response);
    virtual ::grpc::Status StopGame(::grpc::ServerContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response);
    virtual ::grpc::Status LogGame(::grpc::ServerContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartNewGame() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNewGame(::grpc::ServerContext* context, ::router_serverGame::StartNewGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::router_serverGame::StartNewGameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCommandGame(::grpc::ServerContext* context, ::router_serverGame::AddCommandGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::router_serverGame::AddCommandGameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopGame() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopGame(::grpc::ServerContext* context, ::router_serverGame::StopGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::router_serverGame::StopGameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogGame() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogGame(::grpc::ServerContext* context, ::router_serverGame::LogGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::router_serverGame::LogGameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartNewGame<WithAsyncMethod_AddCommandGame<WithAsyncMethod_StopGame<WithAsyncMethod_LogGame<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartNewGame() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::router_serverGame::StartNewGameRequest, ::router_serverGame::StartNewGameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::router_serverGame::StartNewGameRequest* request, ::router_serverGame::StartNewGameReply* response) { return this->StartNewGame(context, request, response); }));}
    void SetMessageAllocatorFor_StartNewGame(
        ::grpc::MessageAllocator< ::router_serverGame::StartNewGameRequest, ::router_serverGame::StartNewGameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::router_serverGame::StartNewGameRequest, ::router_serverGame::StartNewGameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartNewGame(
      ::grpc::CallbackServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::router_serverGame::AddCommandGameRequest, ::router_serverGame::AddCommandGameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::router_serverGame::AddCommandGameRequest* request, ::router_serverGame::AddCommandGameReply* response) { return this->AddCommandGame(context, request, response); }));}
    void SetMessageAllocatorFor_AddCommandGame(
        ::grpc::MessageAllocator< ::router_serverGame::AddCommandGameRequest, ::router_serverGame::AddCommandGameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::router_serverGame::AddCommandGameRequest, ::router_serverGame::AddCommandGameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCommandGame(
      ::grpc::CallbackServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopGame() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::router_serverGame::StopGameRequest, ::router_serverGame::StopGameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::router_serverGame::StopGameRequest* request, ::router_serverGame::StopGameReply* response) { return this->StopGame(context, request, response); }));}
    void SetMessageAllocatorFor_StopGame(
        ::grpc::MessageAllocator< ::router_serverGame::StopGameRequest, ::router_serverGame::StopGameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::router_serverGame::StopGameRequest, ::router_serverGame::StopGameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopGame(
      ::grpc::CallbackServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogGame() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::router_serverGame::LogGameRequest, ::router_serverGame::LogGameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::router_serverGame::LogGameRequest* request, ::router_serverGame::LogGameReply* response) { return this->LogGame(context, request, response); }));}
    void SetMessageAllocatorFor_LogGame(
        ::grpc::MessageAllocator< ::router_serverGame::LogGameRequest, ::router_serverGame::LogGameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::router_serverGame::LogGameRequest, ::router_serverGame::LogGameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogGame(
      ::grpc::CallbackServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartNewGame<WithCallbackMethod_AddCommandGame<WithCallbackMethod_StopGame<WithCallbackMethod_LogGame<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartNewGame() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopGame() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogGame() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartNewGame() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNewGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCommandGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopGame() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogGame() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartNewGame() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartNewGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartNewGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCommandGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCommandGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopGame() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogGame() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartNewGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartNewGame() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::router_serverGame::StartNewGameRequest, ::router_serverGame::StartNewGameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::router_serverGame::StartNewGameRequest, ::router_serverGame::StartNewGameReply>* streamer) {
                       return this->StreamedStartNewGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartNewGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartNewGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StartNewGameRequest* /*request*/, ::router_serverGame::StartNewGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartNewGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::router_serverGame::StartNewGameRequest,::router_serverGame::StartNewGameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCommandGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCommandGame() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::router_serverGame::AddCommandGameRequest, ::router_serverGame::AddCommandGameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::router_serverGame::AddCommandGameRequest, ::router_serverGame::AddCommandGameReply>* streamer) {
                       return this->StreamedAddCommandGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCommandGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCommandGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::AddCommandGameRequest* /*request*/, ::router_serverGame::AddCommandGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCommandGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::router_serverGame::AddCommandGameRequest,::router_serverGame::AddCommandGameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopGame() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::router_serverGame::StopGameRequest, ::router_serverGame::StopGameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::router_serverGame::StopGameRequest, ::router_serverGame::StopGameReply>* streamer) {
                       return this->StreamedStopGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::StopGameRequest* /*request*/, ::router_serverGame::StopGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::router_serverGame::StopGameRequest,::router_serverGame::StopGameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogGame() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::router_serverGame::LogGameRequest, ::router_serverGame::LogGameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::router_serverGame::LogGameRequest, ::router_serverGame::LogGameReply>* streamer) {
                       return this->StreamedLogGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogGame(::grpc::ServerContext* /*context*/, const ::router_serverGame::LogGameRequest* /*request*/, ::router_serverGame::LogGameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::router_serverGame::LogGameRequest,::router_serverGame::LogGameReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartNewGame<WithStreamedUnaryMethod_AddCommandGame<WithStreamedUnaryMethod_StopGame<WithStreamedUnaryMethod_LogGame<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartNewGame<WithStreamedUnaryMethod_AddCommandGame<WithStreamedUnaryMethod_StopGame<WithStreamedUnaryMethod_LogGame<Service > > > > StreamedService;
};

}  // namespace router_serverGame


#endif  // GRPC_router_5fserverGame_2eproto__INCLUDED
