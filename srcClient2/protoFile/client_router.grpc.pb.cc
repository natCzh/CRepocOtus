// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client_router.proto

#include "client_router.pb.h"
#include "client_router.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace client_router {

static const char* Router_method_names[] = {
  "/client_router.Router/AuthorizationObjR",
  "/client_router.Router/StartNewGameR",
  "/client_router.Router/AddCommandGameR",
  "/client_router.Router/StopGameR",
  "/client_router.Router/GetInfGameR",
};

std::unique_ptr< Router::Stub> Router::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Router::Stub> stub(new Router::Stub(channel, options));
  return stub;
}

Router::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuthorizationObjR_(Router_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartNewGameR_(Router_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCommandGameR_(Router_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopGameR_(Router_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInfGameR_(Router_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Router::Stub::AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::client_router::AuthObjRReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthorizationObjR_, context, request, response);
}

void Router::Stub::async::AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthorizationObjR_, context, request, response, std::move(f));
}

void Router::Stub::async::AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthorizationObjR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>* Router::Stub::PrepareAsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client_router::AuthObjRReply, ::client_router::AuthObjRRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthorizationObjR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>* Router::Stub::AsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthorizationObjRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::client_router::StartNewGameRReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartNewGameR_, context, request, response);
}

void Router::Stub::async::StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartNewGameR_, context, request, response, std::move(f));
}

void Router::Stub::async::StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartNewGameR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>* Router::Stub::PrepareAsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client_router::StartNewGameRReply, ::client_router::StartNewGameRRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartNewGameR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>* Router::Stub::AsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartNewGameRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::client_router::AddCommandGameRReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCommandGameR_, context, request, response);
}

void Router::Stub::async::AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCommandGameR_, context, request, response, std::move(f));
}

void Router::Stub::async::AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCommandGameR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>* Router::Stub::PrepareAsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client_router::AddCommandGameRReply, ::client_router::AddCommandGameRRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCommandGameR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>* Router::Stub::AsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCommandGameRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::client_router::StopGameRReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client_router::StopGameRRequest, ::client_router::StopGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopGameR_, context, request, response);
}

void Router::Stub::async::StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client_router::StopGameRRequest, ::client_router::StopGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopGameR_, context, request, response, std::move(f));
}

void Router::Stub::async::StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopGameR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>* Router::Stub::PrepareAsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client_router::StopGameRReply, ::client_router::StopGameRRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopGameR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>* Router::Stub::AsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopGameRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::client_router::GetInfGameRReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInfGameR_, context, request, response);
}

void Router::Stub::async::GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInfGameR_, context, request, response, std::move(f));
}

void Router::Stub::async::GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInfGameR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>* Router::Stub::PrepareAsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::client_router::GetInfGameRReply, ::client_router::GetInfGameRRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInfGameR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>* Router::Stub::AsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInfGameRRaw(context, request, cq);
  result->StartCall();
  return result;
}

Router::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client_router::AuthObjRRequest* req,
             ::client_router::AuthObjRReply* resp) {
               return service->AuthorizationObjR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client_router::StartNewGameRRequest* req,
             ::client_router::StartNewGameRReply* resp) {
               return service->StartNewGameR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client_router::AddCommandGameRRequest* req,
             ::client_router::AddCommandGameRReply* resp) {
               return service->AddCommandGameR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::client_router::StopGameRRequest, ::client_router::StopGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client_router::StopGameRRequest* req,
             ::client_router::StopGameRReply* resp) {
               return service->StopGameR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::client_router::GetInfGameRRequest* req,
             ::client_router::GetInfGameRReply* resp) {
               return service->GetInfGameR(ctx, req, resp);
             }, this)));
}

Router::Service::~Service() {
}

::grpc::Status Router::Service::AuthorizationObjR(::grpc::ServerContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::StartNewGameR(::grpc::ServerContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::AddCommandGameR(::grpc::ServerContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::StopGameR(::grpc::ServerContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::GetInfGameR(::grpc::ServerContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace client_router

