// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client_router.proto
#ifndef GRPC_client_5frouter_2eproto__INCLUDED
#define GRPC_client_5frouter_2eproto__INCLUDED

#include "client_router.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace client_router {

// The greeting service definition.
class Router final {
 public:
  static constexpr char const* service_full_name() {
    return "client_router.Router";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::client_router::AuthObjRReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>> AsyncAuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>>(AsyncAuthorizationObjRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>> PrepareAsyncAuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>>(PrepareAsyncAuthorizationObjRRaw(context, request, cq));
    }
    virtual ::grpc::Status StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::client_router::StartNewGameRReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>> AsyncStartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>>(AsyncStartNewGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>> PrepareAsyncStartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>>(PrepareAsyncStartNewGameRRaw(context, request, cq));
    }
    virtual ::grpc::Status AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::client_router::AddCommandGameRReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>> AsyncAddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>>(AsyncAddCommandGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>> PrepareAsyncAddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>>(PrepareAsyncAddCommandGameRRaw(context, request, cq));
    }
    virtual ::grpc::Status StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::client_router::StopGameRReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>> AsyncStopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>>(AsyncStopGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>> PrepareAsyncStopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>>(PrepareAsyncStopGameRRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::client_router::GetInfGameRReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>> AsyncGetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>>(AsyncGetInfGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>> PrepareAsyncGetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>>(PrepareAsyncGetInfGameRRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>* AsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AuthObjRReply>* PrepareAsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>* AsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StartNewGameRReply>* PrepareAsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>* AsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::AddCommandGameRReply>* PrepareAsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>* AsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::StopGameRReply>* PrepareAsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>* AsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::client_router::GetInfGameRReply>* PrepareAsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::client_router::AuthObjRReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>> AsyncAuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>>(AsyncAuthorizationObjRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>> PrepareAsyncAuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>>(PrepareAsyncAuthorizationObjRRaw(context, request, cq));
    }
    ::grpc::Status StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::client_router::StartNewGameRReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>> AsyncStartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>>(AsyncStartNewGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>> PrepareAsyncStartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>>(PrepareAsyncStartNewGameRRaw(context, request, cq));
    }
    ::grpc::Status AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::client_router::AddCommandGameRReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>> AsyncAddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>>(AsyncAddCommandGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>> PrepareAsyncAddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>>(PrepareAsyncAddCommandGameRRaw(context, request, cq));
    }
    ::grpc::Status StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::client_router::StopGameRReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>> AsyncStopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>>(AsyncStopGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>> PrepareAsyncStopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>>(PrepareAsyncStopGameRRaw(context, request, cq));
    }
    ::grpc::Status GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::client_router::GetInfGameRReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>> AsyncGetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>>(AsyncGetInfGameRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>> PrepareAsyncGetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>>(PrepareAsyncGetInfGameRRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, std::function<void(::grpc::Status)>) override;
      void AuthorizationObjR(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, std::function<void(::grpc::Status)>) override;
      void StartNewGameR(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, std::function<void(::grpc::Status)>) override;
      void AddCommandGameR(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, std::function<void(::grpc::Status)>) override;
      void StopGameR(::grpc::ClientContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, std::function<void(::grpc::Status)>) override;
      void GetInfGameR(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>* AsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::AuthObjRReply>* PrepareAsyncAuthorizationObjRRaw(::grpc::ClientContext* context, const ::client_router::AuthObjRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>* AsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::StartNewGameRReply>* PrepareAsyncStartNewGameRRaw(::grpc::ClientContext* context, const ::client_router::StartNewGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>* AsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::AddCommandGameRReply>* PrepareAsyncAddCommandGameRRaw(::grpc::ClientContext* context, const ::client_router::AddCommandGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>* AsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::StopGameRReply>* PrepareAsyncStopGameRRaw(::grpc::ClientContext* context, const ::client_router::StopGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>* AsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::client_router::GetInfGameRReply>* PrepareAsyncGetInfGameRRaw(::grpc::ClientContext* context, const ::client_router::GetInfGameRRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthorizationObjR_;
    const ::grpc::internal::RpcMethod rpcmethod_StartNewGameR_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCommandGameR_;
    const ::grpc::internal::RpcMethod rpcmethod_StopGameR_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfGameR_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AuthorizationObjR(::grpc::ServerContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response);
    virtual ::grpc::Status StartNewGameR(::grpc::ServerContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response);
    virtual ::grpc::Status AddCommandGameR(::grpc::ServerContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response);
    virtual ::grpc::Status StopGameR(::grpc::ServerContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response);
    virtual ::grpc::Status GetInfGameR(::grpc::ServerContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorizationObjR(::grpc::ServerContext* context, ::client_router::AuthObjRRequest* request, ::grpc::ServerAsyncResponseWriter< ::client_router::AuthObjRReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNewGameR(::grpc::ServerContext* context, ::client_router::StartNewGameRRequest* request, ::grpc::ServerAsyncResponseWriter< ::client_router::StartNewGameRReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCommandGameR(::grpc::ServerContext* context, ::client_router::AddCommandGameRRequest* request, ::grpc::ServerAsyncResponseWriter< ::client_router::AddCommandGameRReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopGameR() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopGameR(::grpc::ServerContext* context, ::client_router::StopGameRRequest* request, ::grpc::ServerAsyncResponseWriter< ::client_router::StopGameRReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfGameR(::grpc::ServerContext* context, ::client_router::GetInfGameRRequest* request, ::grpc::ServerAsyncResponseWriter< ::client_router::GetInfGameRReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthorizationObjR<WithAsyncMethod_StartNewGameR<WithAsyncMethod_AddCommandGameR<WithAsyncMethod_StopGameR<WithAsyncMethod_GetInfGameR<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::client_router::AuthObjRRequest* request, ::client_router::AuthObjRReply* response) { return this->AuthorizationObjR(context, request, response); }));}
    void SetMessageAllocatorFor_AuthorizationObjR(
        ::grpc::MessageAllocator< ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthorizationObjR(
      ::grpc::CallbackServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::client_router::StartNewGameRRequest* request, ::client_router::StartNewGameRReply* response) { return this->StartNewGameR(context, request, response); }));}
    void SetMessageAllocatorFor_StartNewGameR(
        ::grpc::MessageAllocator< ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartNewGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::client_router::AddCommandGameRRequest* request, ::client_router::AddCommandGameRReply* response) { return this->AddCommandGameR(context, request, response); }));}
    void SetMessageAllocatorFor_AddCommandGameR(
        ::grpc::MessageAllocator< ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCommandGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopGameR() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::client_router::StopGameRRequest, ::client_router::StopGameRReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::client_router::StopGameRRequest* request, ::client_router::StopGameRReply* response) { return this->StopGameR(context, request, response); }));}
    void SetMessageAllocatorFor_StopGameR(
        ::grpc::MessageAllocator< ::client_router::StopGameRRequest, ::client_router::StopGameRReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::client_router::StopGameRRequest, ::client_router::StopGameRReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::client_router::GetInfGameRRequest* request, ::client_router::GetInfGameRReply* response) { return this->GetInfGameR(context, request, response); }));}
    void SetMessageAllocatorFor_GetInfGameR(
        ::grpc::MessageAllocator< ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuthorizationObjR<WithCallbackMethod_StartNewGameR<WithCallbackMethod_AddCommandGameR<WithCallbackMethod_StopGameR<WithCallbackMethod_GetInfGameR<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopGameR() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorizationObjR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartNewGameR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCommandGameR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopGameR() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopGameR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfGameR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthorizationObjR(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuthorizationObjR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartNewGameR(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartNewGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCommandGameR(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCommandGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopGameR() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopGameR(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInfGameR(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInfGameR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthorizationObjR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthorizationObjR() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::client_router::AuthObjRRequest, ::client_router::AuthObjRReply>* streamer) {
                       return this->StreamedAuthorizationObjR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuthorizationObjR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthorizationObjR(::grpc::ServerContext* /*context*/, const ::client_router::AuthObjRRequest* /*request*/, ::client_router::AuthObjRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthorizationObjR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::client_router::AuthObjRRequest,::client_router::AuthObjRReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartNewGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartNewGameR() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::client_router::StartNewGameRRequest, ::client_router::StartNewGameRReply>* streamer) {
                       return this->StreamedStartNewGameR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartNewGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartNewGameR(::grpc::ServerContext* /*context*/, const ::client_router::StartNewGameRRequest* /*request*/, ::client_router::StartNewGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartNewGameR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::client_router::StartNewGameRRequest,::client_router::StartNewGameRReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCommandGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCommandGameR() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::client_router::AddCommandGameRRequest, ::client_router::AddCommandGameRReply>* streamer) {
                       return this->StreamedAddCommandGameR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCommandGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCommandGameR(::grpc::ServerContext* /*context*/, const ::client_router::AddCommandGameRRequest* /*request*/, ::client_router::AddCommandGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCommandGameR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::client_router::AddCommandGameRRequest,::client_router::AddCommandGameRReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopGameR() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::client_router::StopGameRRequest, ::client_router::StopGameRReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::client_router::StopGameRRequest, ::client_router::StopGameRReply>* streamer) {
                       return this->StreamedStopGameR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopGameR(::grpc::ServerContext* /*context*/, const ::client_router::StopGameRRequest* /*request*/, ::client_router::StopGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopGameR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::client_router::StopGameRRequest,::client_router::StopGameRReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfGameR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfGameR() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::client_router::GetInfGameRRequest, ::client_router::GetInfGameRReply>* streamer) {
                       return this->StreamedGetInfGameR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInfGameR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfGameR(::grpc::ServerContext* /*context*/, const ::client_router::GetInfGameRRequest* /*request*/, ::client_router::GetInfGameRReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfGameR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::client_router::GetInfGameRRequest,::client_router::GetInfGameRReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthorizationObjR<WithStreamedUnaryMethod_StartNewGameR<WithStreamedUnaryMethod_AddCommandGameR<WithStreamedUnaryMethod_StopGameR<WithStreamedUnaryMethod_GetInfGameR<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthorizationObjR<WithStreamedUnaryMethod_StartNewGameR<WithStreamedUnaryMethod_AddCommandGameR<WithStreamedUnaryMethod_StopGameR<WithStreamedUnaryMethod_GetInfGameR<Service > > > > > StreamedService;
};

}  // namespace client_router


#endif  // GRPC_client_5frouter_2eproto__INCLUDED
